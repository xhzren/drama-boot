// source: DramaMessage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ConMessage', null, global);
goog.exportSymbol('proto.ConMessage.DataType', null, global);
goog.exportSymbol('proto.ConMessage.DatabodyCase', null, global);
goog.exportSymbol('proto.MakeRoom', null, global);
goog.exportSymbol('proto.RequestInfo', null, global);
goog.exportSymbol('proto.RoomConvert', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ConMessage.oneofGroups_);
};
goog.inherits(proto.ConMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConMessage.displayName = 'proto.ConMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RequestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RequestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RequestInfo.displayName = 'proto.RequestInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MakeRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MakeRoom.repeatedFields_, null);
};
goog.inherits(proto.MakeRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MakeRoom.displayName = 'proto.MakeRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomConvert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomConvert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomConvert.displayName = 'proto.RoomConvert';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ConMessage.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.ConMessage.DatabodyCase = {
  DATABODY_NOT_SET: 0,
  MAKE_ROOM: 3,
  ROOM_CONVERT: 4
};

/**
 * @return {proto.ConMessage.DatabodyCase}
 */
proto.ConMessage.prototype.getDatabodyCase = function() {
  return /** @type {proto.ConMessage.DatabodyCase} */(jspb.Message.computeOneofCase(this, proto.ConMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ConMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    requestInfo: (f = msg.getRequestInfo()) && proto.RequestInfo.toObject(includeInstance, f),
    makeRoom: (f = msg.getMakeRoom()) && proto.MakeRoom.toObject(includeInstance, f),
    roomConvert: (f = msg.getRoomConvert()) && proto.RoomConvert.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConMessage}
 */
proto.ConMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConMessage;
  return proto.ConMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConMessage}
 */
proto.ConMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ConMessage.DataType} */ (reader.readEnum());
      msg.setDataType(value);
      break;
    case 2:
      var value = new proto.RequestInfo;
      reader.readMessage(value,proto.RequestInfo.deserializeBinaryFromReader);
      msg.setRequestInfo(value);
      break;
    case 3:
      var value = new proto.MakeRoom;
      reader.readMessage(value,proto.MakeRoom.deserializeBinaryFromReader);
      msg.setMakeRoom(value);
      break;
    case 4:
      var value = new proto.RoomConvert;
      reader.readMessage(value,proto.RoomConvert.deserializeBinaryFromReader);
      msg.setRoomConvert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ConMessage.DataType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRequestInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RequestInfo.serializeBinaryToWriter
    );
  }
  f = message.getMakeRoom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MakeRoom.serializeBinaryToWriter
    );
  }
  f = message.getRoomConvert();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.RoomConvert.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ConMessage.DataType = {
  UNIVERSAL: 0,
  MAKE_ROOM: 1,
  ROOM_CONVERT: 2
};

/**
 * required DataType data_type = 1;
 * @return {!proto.ConMessage.DataType}
 */
proto.ConMessage.prototype.getDataType = function() {
  return /** @type {!proto.ConMessage.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ConMessage.DataType} value
 * @return {!proto.ConMessage} returns this
 */
proto.ConMessage.prototype.setDataType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ConMessage} returns this
 */
proto.ConMessage.prototype.clearDataType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConMessage.prototype.hasDataType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestInfo request_info = 2;
 * @return {?proto.RequestInfo}
 */
proto.ConMessage.prototype.getRequestInfo = function() {
  return /** @type{?proto.RequestInfo} */ (
    jspb.Message.getWrapperField(this, proto.RequestInfo, 2));
};


/**
 * @param {?proto.RequestInfo|undefined} value
 * @return {!proto.ConMessage} returns this
*/
proto.ConMessage.prototype.setRequestInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConMessage} returns this
 */
proto.ConMessage.prototype.clearRequestInfo = function() {
  return this.setRequestInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConMessage.prototype.hasRequestInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MakeRoom make_room = 3;
 * @return {?proto.MakeRoom}
 */
proto.ConMessage.prototype.getMakeRoom = function() {
  return /** @type{?proto.MakeRoom} */ (
    jspb.Message.getWrapperField(this, proto.MakeRoom, 3));
};


/**
 * @param {?proto.MakeRoom|undefined} value
 * @return {!proto.ConMessage} returns this
*/
proto.ConMessage.prototype.setMakeRoom = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ConMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConMessage} returns this
 */
proto.ConMessage.prototype.clearMakeRoom = function() {
  return this.setMakeRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConMessage.prototype.hasMakeRoom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RoomConvert room_convert = 4;
 * @return {?proto.RoomConvert}
 */
proto.ConMessage.prototype.getRoomConvert = function() {
  return /** @type{?proto.RoomConvert} */ (
    jspb.Message.getWrapperField(this, proto.RoomConvert, 4));
};


/**
 * @param {?proto.RoomConvert|undefined} value
 * @return {!proto.ConMessage} returns this
*/
proto.ConMessage.prototype.setRoomConvert = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ConMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConMessage} returns this
 */
proto.ConMessage.prototype.clearRoomConvert = function() {
  return this.setRoomConvert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConMessage.prototype.hasRoomConvert = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RequestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.RequestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RequestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RequestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RequestInfo}
 */
proto.RequestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RequestInfo;
  return proto.RequestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RequestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RequestInfo}
 */
proto.RequestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RequestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RequestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RequestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RequestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.RequestInfo.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RequestInfo} returns this
 */
proto.RequestInfo.prototype.setToken = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RequestInfo} returns this
 */
proto.RequestInfo.prototype.clearToken = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RequestInfo.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MakeRoom.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MakeRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.MakeRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MakeRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MakeRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    plotId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    actorIdList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    capacity: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MakeRoom}
 */
proto.MakeRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MakeRoom;
  return proto.MakeRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MakeRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MakeRoom}
 */
proto.MakeRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlotId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addActorId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCapacity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MakeRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MakeRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MakeRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MakeRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActorIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.MakeRoom.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.setHost = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.clearHost = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MakeRoom.prototype.hasHost = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string plot_id = 2;
 * @return {string}
 */
proto.MakeRoom.prototype.getPlotId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.setPlotId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.clearPlotId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MakeRoom.prototype.hasPlotId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string actor_id = 3;
 * @return {!Array<string>}
 */
proto.MakeRoom.prototype.getActorIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.setActorIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.addActorId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.clearActorIdList = function() {
  return this.setActorIdList([]);
};


/**
 * optional string capacity = 4;
 * @return {string}
 */
proto.MakeRoom.prototype.getCapacity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.setCapacity = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MakeRoom} returns this
 */
proto.MakeRoom.prototype.clearCapacity = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MakeRoom.prototype.hasCapacity = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomConvert.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomConvert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomConvert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomConvert.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    actorId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    accountId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    command: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomConvert}
 */
proto.RoomConvert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomConvert;
  return proto.RoomConvert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomConvert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomConvert}
 */
proto.RoomConvert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomConvert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomConvert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomConvert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomConvert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string room_id = 1;
 * @return {string}
 */
proto.RoomConvert.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomConvert} returns this
 */
proto.RoomConvert.prototype.setRoomId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RoomConvert} returns this
 */
proto.RoomConvert.prototype.clearRoomId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomConvert.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string actor_id = 2;
 * @return {string}
 */
proto.RoomConvert.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomConvert} returns this
 */
proto.RoomConvert.prototype.setActorId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RoomConvert} returns this
 */
proto.RoomConvert.prototype.clearActorId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomConvert.prototype.hasActorId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string account_id = 3;
 * @return {string}
 */
proto.RoomConvert.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomConvert} returns this
 */
proto.RoomConvert.prototype.setAccountId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RoomConvert} returns this
 */
proto.RoomConvert.prototype.clearAccountId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomConvert.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string command = 4;
 * @return {string}
 */
proto.RoomConvert.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomConvert} returns this
 */
proto.RoomConvert.prototype.setCommand = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RoomConvert} returns this
 */
proto.RoomConvert.prototype.clearCommand = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomConvert.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto);
